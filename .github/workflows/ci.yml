name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run security checks
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        pip install safety
        safety check -r requirements.txt || true
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        pip install bandit
        bandit -r bot/ || true
        
    - name: Run type checking
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
        pip install mypy
        mypy bot/ || true
        
    - name: Test imports
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key"
        REDIS_HOST: "dummy"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
      run: |
        # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è Redis
        sed -i 's/redis.Redis/Mock/g' bot/cache.py
        sed -i '1iclass Mock:\n    def __init__(self, *args, **kwargs):\n        pass\n    async def get(self, *args):\n        return None\n    async def set(self, *args):\n        pass\n    async def delete(self, *args):\n        pass' bot/cache.py
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        python -c "import bot; print('‚úÖ All modules imported successfully')"
        python -c "import config; print('‚úÖ Config imported successfully')"
        python -c "import main; print('‚úÖ Main imported successfully')"
        
    - name: Check for secrets
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ
        if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude-dir=.venv --exclude=requirements.txt; then
          echo "‚ö†Ô∏è Potential secrets found in code"
          exit 1
        else
          echo "‚úÖ No secrets found in code"
        fi
        
    - name: Validate .gitignore
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
        if [ ! -f .gitignore ]; then
          echo "‚ùå .gitignore file missing"
          exit 1
        fi
        
        if grep -q "\.env" .gitignore; then
          echo "‚úÖ .env files are ignored"
        else
          echo "‚ö†Ô∏è .env files might not be ignored"
        fi
        
    - name: Check Docker files
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤
        if [ -f Dockerfile ]; then
          echo "‚úÖ Dockerfile exists"
        fi
        
        if [ -f docker-compose.yml ]; then
          echo "‚úÖ docker-compose.yml exists"
        fi

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        echo "üîí Security scan completed"
        
    - name: Check for large files
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        find . -type f -size +50M | head -10
        echo "üìÅ Large files check completed"

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate documentation
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if [ -f README.md ]; then
          echo "‚úÖ README.md exists"
        else
          echo "‚ùå README.md missing"
          exit 1
        fi
        
        if [ -f .env.example ]; then
          echo "‚úÖ .env.example exists"
        else
          echo "‚ùå .env.example missing"
          exit 1
        fi
        
        if [ -f requirements.txt ]; then
          echo "‚úÖ requirements.txt exists"
        else
          echo "‚ùå requirements.txt missing"
          exit 1
        fi 