name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø–µ—Ä–≤—ã–π –±–∞—Ä—å–µ—Ä
  fast-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Security and quality checks
      run: |
        echo "üîí Running security and quality checks..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        pip install safety bandit mypy
        safety check -r requirements.txt || true
        bandit -r bot/ || true
        mypy bot/ || true
        
    - name: Run fast unit tests
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key" 
        REDIS_HOST: "dummy"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "‚ö° Running fast unit tests (no external dependencies)..."
        
        # –ë—ã—Å—Ç—Ä—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CI —Å pytest
        python -m pytest tests/test_integration_ci.py -v --tb=short
        
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        python tests/test_imports.py
        
    - name: Validate project structure
      run: |
        echo "üìÅ Validating project structure..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files=(
          "bot/reminders.py"
          "bot/request_limiter.py" 
          "handlers/reminders.py"
          "tests/test_integration_ci.py"
          "tests/test_ai_reminders.py"
          "tests/test_request_limiter.py"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
    - name: Check for secrets and configuration
      run: |
        echo "üîç Checking for secrets..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ
        if grep -r "sk-[a-zA-Z0-9]" . \
          --exclude-dir={.git,.venv,.pytest_cache,__pycache__} \
          --exclude={*.md,*.yml,*.yaml} \
          -l; then
          echo "‚ùå OpenAI API keys found in code"
          exit 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
        if [ -f .gitignore ] && grep -q "\.env" .gitignore; then
          echo "‚úÖ .env files are properly ignored"
        else
          echo "‚ö†Ô∏è .env files might not be ignored"
        fi

  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  component-tests:
    runs-on: ubuntu-latest
    needs: fast-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test request limiter thoroughly
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key"
        REDIS_HOST: "dummy"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üîí Testing request limiter comprehensively..."
        
        # –ó–∞–ø—É—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è —Å pytest
        python -m pytest tests/test_request_limiter.py -v --tb=short
        
    - name: Test image encoding and processing
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key"
        REDIS_HOST: "dummy"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üñºÔ∏è Testing image encoding/decoding and Telegram integration..."
        
        # –¢–µ—Å—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è AI –∫–ª–∏–µ–Ω—Ç–∞
        python -m pytest tests/test_image_encoding.py::TestImageEncoding -v --tb=short
        
        # –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ –≤ Telegram –±–æ—Ç–µ
        python -m pytest tests/test_image_encoding.py::TestTelegramImageHandling -v --tb=short
        
        # –¢–µ—Å—Ç—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö Telegram API
        python -m pytest tests/test_image_encoding.py::TestTelegramAPIDataTypes -v --tb=short
        
    - name: Test FSM states and handlers
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key"
        REDIS_HOST: "dummy"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üé≠ Testing FSM states and handlers..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        python -c "
        try:
            from bot.states import ReminderStates, EditReminderStates
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            required_states = [
                'waiting_for_type',
                'waiting_for_ai_prompt', 
                'waiting_for_ai_role',
                'confirmation'
            ]
            
            for state_name in required_states:
                state = getattr(ReminderStates, state_name, None)
                if state is None:
                    raise ValueError(f'Missing state: {state_name}')
            
            print('‚úÖ All FSM states are available')
        except Exception as e:
            print(f'‚ùå FSM states test failed: {e}')
            exit(1)
        "
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        python -c "
        try:
            from handlers import ai, reminders, settings, base
            print('‚úÖ All handlers import correctly')
        except Exception as e:
            print(f'‚ùå Handlers import failed: {e}')
            exit(1)
        "
        
    - name: Test configuration and constants
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key"
        REDIS_HOST: "dummy"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "‚öôÔ∏è Testing configuration and constants..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        python -c "
        try:
            from bot.constants import BUTTON_TEXTS
            from config import Config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if 'reminders' in BUTTON_TEXTS:
                reminder_buttons = BUTTON_TEXTS['reminders']
                print('‚úÖ Reminder buttons are configured')
            else:
                print('‚ö†Ô∏è No reminder buttons found')
            
            print('‚úÖ Configuration and constants are valid')
        except Exception as e:
            print(f'‚ùå Configuration test failed: {e}')
            exit(1)
        "

  # –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å Redis
  integration-tests:
    runs-on: ubuntu-latest
    needs: [fast-checks, component-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run full integration tests
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key"
        REDIS_HOST: "localhost"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üîÑ Running full integration tests with Redis..."
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
        sleep 2
        
        # –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å pytest
        python -m pytest tests/test_ai_reminders.py -v --tb=short
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        python -m pytest tests/test_image_encoding.py::TestImageEncodingIntegration -v --tb=short
        
    - name: Test system integration and performance
      env:
        OPENAI_API_KEY: "test_key"
        TELEGRAM_TOKEN: "test_token"
        DEEPSEEK_API_KEY: "test_key"
        REDIS_HOST: "localhost"
        REDIS_PORT: "6379"
        REDIS_DB: "0"
        LOG_LEVEL: "INFO"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "ÔøΩ Testing system integration and performance..."
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        python -c "
        import asyncio
        import time
        import sys
        
        async def test_full_integration():
            try:
                # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                from bot.ai_client import AIClient
                from bot.cache import CacheManager
                from bot.reminders import ReminderManager
                from bot.request_limiter import RequestLimiter
                
                print('‚úÖ All components imported successfully')
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
                cache_manager = CacheManager()
                request_limiter = RequestLimiter()
                ai_client = AIClient()
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π
                ai_client.set_request_limiter(request_limiter)
                reminder_manager = ReminderManager(cache_manager, None, ai_client)
                
                print('‚úÖ All components created and connected')
                
                # –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                await request_limiter.start()
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                start_time = time.time()
                for i in range(10):
                    await request_limiter.acquire_request_lock(i, 'test')
                    await request_limiter.release_request_lock(i)
                end_time = time.time()
                
                print(f'‚úÖ Performance test: 10 operations in {end_time - start_time:.3f}s')
                
                await request_limiter.stop()
                
                print('‚úÖ Full integration test completed successfully')
                return True
                
            except Exception as e:
                print(f'‚ùå Integration test failed: {e}')
                import traceback
                traceback.print_exc()
                return False
        
        success = asyncio.run(test_full_integration())
        if not success:
            sys.exit(1)
        "

  # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  final-validation:
    runs-on: ubuntu-latest
    needs: [fast-checks, component-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate project completeness
      run: |
        echo "ÔøΩ Final project validation..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        critical_files=(
          "README.md"
          "requirements.txt"
          "pyproject.toml"
          ".env.example"
          "Dockerfile"
          "docker-compose.yml"
          "config.py"
          "main.py"
          "bot/reminders.py"
          "bot/request_limiter.py"
          "bot/ai_client.py"
          "bot/cache.py"
          "handlers/reminders.py"
          "tests/test_integration_ci.py"
          "tests/test_ai_reminders.py"
          "tests/test_request_limiter.py"
          "tests/test_image_encoding.py"
        )
        
        missing_files=()
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file"
          else
            echo "‚ùå $file MISSING"
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "üí• Critical files are missing!"
          exit 1
        else
          echo "üéâ All critical files are present!"
        fi
        
    - name: Generate test summary
      run: |
        echo "üìä Test Summary:"
        echo "‚úÖ Fast unit tests (no dependencies) - pytest"
        echo "‚úÖ Component-specific tests - pytest"  
        echo "‚úÖ Image encoding/decoding tests - pytest"
        echo "‚úÖ Full integration tests with Redis - pytest"
        echo "‚úÖ Performance validation"
        echo "‚úÖ Security and quality checks"
        echo "‚úÖ Project structure validation"
        echo ""
        echo "üß™ Testing Framework:"
        echo "  - pytest >= 8.0.0 for test execution"
        echo "  - pytest-asyncio for async test support"
        echo "  - Structured test organization (unit/integration)"
        echo "  - PIL/Pillow for image processing tests"
        echo ""
        echo "üéØ After refactoring:"
        echo "  - Eliminated test duplication"
        echo "  - Clear separation: unit vs integration tests"
        echo "  - Optimized CI pipeline performance"
        echo "  - Improved test maintainability"
        echo "  - Added Moscow timezone support"
        echo "  - Added comprehensive image processing tests"
        echo "  - Added Telegram API data type validation"
        echo ""
        echo "üöÄ Ready for production deployment!" 