import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import ContextTypes
from .constants import ROLES, BUTTON_TEXTS, MAX_MESSAGE_LENGTH, IMAGE_SIZE_LIMIT_MB
from .metrics import metrics

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_owner_manager(context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    return context.bot_data.get("owner_manager")

def is_owner(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
    owner_manager = get_owner_manager(context)
    if owner_manager:
        return owner_manager.is_owner(user_id)
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    try:
        welcome_msg = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!</b>\n\n"
            "–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π:\n"
            "‚Ä¢ <b>–ú–æ–¥–µ–ª–∏:</b> OpenAI, DeepSeek\n"
            "‚Ä¢ <b>–†–æ–ª–∏:</b> –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –£—á–µ–Ω—ã–π, –ö—Ä–µ–∞—Ç–∏–≤, –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"
        )
        await update.message.reply_text(welcome_msg, parse_mode="HTML")
        logger.info(f"User {update.effective_user.id} started the bot")
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")


async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        ai_client = context.bot_data.get("ai_client")
        user_data = context.user_data

        if not ai_client:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∫–ª–∏–µ–Ω—Ç–∞")
            return

        current_model = ai_client.active_provider
        current_role = user_data.get("role", "assistant")

        settings_text = (
            "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            f"üîß <b>–ú–æ–¥–µ–ª—å:</b> {BUTTON_TEXTS['models'][current_model]}\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {BUTTON_TEXTS['roles'][current_role]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ú–æ–¥–µ–ª—å", callback_data="change_model"),
                InlineKeyboardButton("üé≠ –†–æ–ª—å", callback_data="change_role")
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if is_owner(update.effective_user.id, context):
            keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_settings")])

        await update.message.reply_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in show_settings: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if not is_owner(user_id, context):
            await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞")
            logger.warning(f"User {user_id} attempted to access stats without permission")
            return
        
        stats = metrics.get_stats()
        
        if not stats:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üìà <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {stats['total_requests']}\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {stats['successful_requests']}\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {stats['failed_requests']}\n"
            f"üìä <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {stats['success_rate']:.1%}\n"
            f"‚è±Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {stats['avg_response_time']:.2f}—Å\n\n"
            f"üíæ <b>–ö—ç—à:</b>\n"
            f"‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è: {stats['cache_hits']}\n"
            f"‚Ä¢ –ü—Ä–æ–º–∞—Ö–∏: {stats['cache_misses']}\n"
            f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['cache_hit_rate']:.1%}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        if stats.get('providers'):
            stats_text += "<b>–ü–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:</b>\n"
            for provider, provider_stats in stats['providers'].items():
                stats_text += (
                    f"‚Ä¢ <b>{provider.upper()}:</b> "
                    f"{provider_stats['successful']}/{provider_stats['total']} "
                    f"({provider_stats['success_rate']:.1%}) "
                    f"‚è±Ô∏è {provider_stats['avg_response_time']:.2f}—Å\n"
                )
        
        await update.message.reply_text(stats_text, parse_mode="HTML")
        logger.info(f"Owner {user_id} accessed bot statistics")
        
    except Exception as e:
        logger.error(f"Error in show_stats: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def show_stats_callback(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ callback (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    try:
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if not is_owner(user_id, context):
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞", show_alert=True)
            logger.warning(f"User {user_id} attempted to access stats without permission")
            return
        
        stats = metrics.get_stats()
        
        if not stats:
            await query.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
            
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üìà <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {stats['total_requests']}\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {stats['successful_requests']}\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {stats['failed_requests']}\n"
            f"üìä <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {stats['success_rate']:.1%}\n"
            f"‚è±Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {stats['avg_response_time']:.2f}—Å\n\n"
            f"üíæ <b>–ö—ç—à:</b>\n"
            f"‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è: {stats['cache_hits']}\n"
            f"‚Ä¢ –ü—Ä–æ–º–∞—Ö–∏: {stats['cache_misses']}\n"
            f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['cache_hit_rate']:.1%}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        if stats.get('providers'):
            stats_text += "<b>–ü–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:</b>\n"
            for provider, provider_stats in stats['providers'].items():
                stats_text += (
                    f"‚Ä¢ <b>{provider.upper()}:</b> "
                    f"{provider_stats['successful']}/{provider_stats['total']} "
                    f"({provider_stats['success_rate']:.1%}) "
                    f"‚è±Ô∏è {provider_stats['avg_response_time']:.2f}—Å\n"
                )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")]]
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        logger.info(f"Owner {user_id} accessed bot statistics via callback")
        
    except Exception as e:
        logger.error(f"Error in show_stats_callback: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()

        ai_client = context.bot_data.get("ai_client")
        user_data = context.user_data

        if query.data == "change_model":
            await _show_model_selector(query, ai_client)
        elif query.data.startswith("set_model_"):
            await _handle_model_selection(query, context)
        elif query.data == "change_role":
            await _show_role_selector(query, user_data)
        elif query.data.startswith("set_role_"):
            await _handle_role_selection(query, context)
        elif query.data == "back_to_settings":
            await show_updated_settings(query, context)
        elif query.data == "close_settings":
            await query.delete_message()
        elif query.data == "show_stats":
            await show_stats_callback(query, context)
        else:
            logger.warning(f"Unknown callback data: {query.data}")
            
    except Exception as e:
        logger.error(f"Error in button_handler: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏", show_alert=True)


async def _show_model_selector(query, ai_client):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    f"{BUTTON_TEXTS['models']['openai']} {'‚úÖ' if ai_client.active_provider == 'openai' else ''}",
                    callback_data="set_model_openai"
                )
            ],
            [
                InlineKeyboardButton(
                    f"{BUTTON_TEXTS['models']['deepseek']} {'‚úÖ' if ai_client.active_provider == 'deepseek' else ''}",
                    callback_data="set_model_deepseek"
                )
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Error in _show_model_selector: {e}")


async def _handle_model_selection(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    try:
        model = query.data.split("_")[-1]
        await context.bot_data["ai_client"].set_provider(model)
        await show_updated_settings(query, context)
        await query.answer(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model.upper()}", show_alert=False)
        logger.info(f"User {query.from_user.id} changed model to {model}")
    except Exception as e:
        logger.error(f"Error in _handle_model_selection: {e}")
        await query.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏: {str(e)}", show_alert=True)


async def _show_role_selector(query, user_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
    try:
        current_role = user_data.get("role", "assistant")
        keyboard = [
            [
                InlineKeyboardButton(
                    f"{BUTTON_TEXTS['roles']['assistant']} {'‚úÖ' if current_role == 'assistant' else ''}",
                    callback_data="set_role_assistant"
                )
            ],
            [
                InlineKeyboardButton(
                    f"{BUTTON_TEXTS['roles']['scientist']} {'‚úÖ' if current_role == 'scientist' else ''}",
                    callback_data="set_role_scientist"
                )
            ],
            [
                InlineKeyboardButton(
                    f"{BUTTON_TEXTS['roles']['creative']} {'‚úÖ' if current_role == 'creative' else ''}",
                    callback_data="set_role_creative"
                )
            ],
            [
                InlineKeyboardButton(
                    f"{BUTTON_TEXTS['roles']['developer']} {'‚úÖ' if current_role == 'developer' else ''}",
                    callback_data="set_role_developer"
                )
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
        ]

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è AI:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Error in _show_role_selector: {e}")


async def _handle_role_selection(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
    try:
        role = query.data.split("_")[-1]
        context.user_data["role"] = role
        await show_updated_settings(query, context)
        logger.info(f"User {query.from_user.id} changed role to {role}")
    except Exception as e:
        logger.error(f"Error in _handle_role_selection: {e}")


async def show_updated_settings(query, context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        ai_client = context.bot_data.get("ai_client")
        user_data = context.user_data

        current_model = ai_client.active_provider
        current_role = user_data.get("role", "assistant")

        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>\n\n"
            f"üîß <b>–ú–æ–¥–µ–ª—å:</b> {BUTTON_TEXTS['models'][current_model]}\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {BUTTON_TEXTS['roles'][current_role]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ú–æ–¥–µ–ª—å", callback_data="change_model"),
                InlineKeyboardButton("üé≠ –†–æ–ª—å", callback_data="change_role")
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if is_owner(query.from_user.id, context):
            keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_settings")])

        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in show_updated_settings: {e}")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        ai_client = context.bot_data.get("ai_client")
        user_data = context.user_data

        if not ai_client:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∫–ª–∏–µ–Ω—Ç–∞")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(update.message.text) > MAX_MESSAGE_LENGTH:
            await update.message.reply_text(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        role = user_data.get("role", "assistant")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        try:
            answer = await ai_client.process_text(update.message.text, role)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            if len(answer) > MAX_MESSAGE_LENGTH:
                chunks = [answer[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(answer), MAX_MESSAGE_LENGTH)]
                for i, chunk in enumerate(chunks):
                    if i == 0:
                        await processing_msg.edit_text(chunk)
                    else:
                        await update.message.reply_text(chunk)
            else:
                await processing_msg.edit_text(answer)
                
        except Exception as e:
            logger.error(f"Error processing text: {e}")
            await processing_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
            
    except Exception as e:
        logger.error(f"Error in handle_text: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        ai_client = context.bot_data.get("ai_client")

        if not ai_client:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∫–ª–∏–µ–Ω—Ç–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo = update.message.photo[-1]
        if photo.file_size > IMAGE_SIZE_LIMIT_MB:  # 10MB
            await update.message.reply_text("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 10MB.")
            return

        processing_msg = await update.message.reply_text("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            photo_file = await photo.get_file()
            photo_bytes = await photo_file.download_as_bytearray()
            user_prompt = update.message.caption

            answer = await ai_client.process_image(photo_bytes, user_prompt)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            if len(answer) > MAX_MESSAGE_LENGTH:
                chunks = [answer[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(answer), MAX_MESSAGE_LENGTH)]
                for i, chunk in enumerate(chunks):
                    if i == 0:
                        await processing_msg.edit_text(chunk)
                    else:
                        await update.message.reply_text(chunk)
            else:
                await processing_msg.edit_text(answer)
                
        except Exception as e:
            logger.error(f"Error processing image: {e}")
            await processing_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"Error in handle_image: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    error_msg = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    if update.callback_query:
        await update.callback_query.answer(error_msg, show_alert=True)
    elif update.message:
        await update.message.reply_text(error_msg)