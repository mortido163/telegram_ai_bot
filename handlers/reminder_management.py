"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
"""
import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.states import EditReminderStates
from .reminder_utils import (
    moscow_datetime, safe_edit_message, get_reminder_manager
)

logger = logging.getLogger(__name__)
management_router = Router()


@management_router.callback_query(F.data == "list_reminders")
async def list_user_reminders(callback: types.CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reminder_manager = await get_reminder_manager(kwargs)
    
    try:
        reminders = await reminder_manager.get_user_reminders(callback.from_user.id)
        
        if not reminders:
            text = (
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders_menu")
            builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
            builder.adjust(1)
            
        else:
            text = f"üìã <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(reminders)}):</b>\n\n"
            
            builder = InlineKeyboardBuilder()
            
            for i, reminder in enumerate(reminders[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if reminder.recurrence_type.value == "none":
                    status = "‚è∞" if not reminder.is_sent else "‚úÖ"
                else:
                    status = "üîÑ" if reminder.is_active else "‚úÖ"
                
                type_icon = "ü§ñ" if reminder.reminder_type.value == "ai_query" else "üìù"
                short_title = reminder.title[:20] + "..." if len(reminder.title) > 20 else reminder.title
                date_str = reminder.remind_date.strftime("%d.%m")
                time_str = reminder.remind_time.strftime("%H:%M")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
                recurrence_info = ""
                if reminder.recurrence_type.value != "none":
                    if reminder.recurrence_type.value == "daily":
                        recurrence_info = " (–µ–∂–µ–¥–Ω.)"
                    elif reminder.recurrence_type.value == "weekly":
                        recurrence_info = " (–µ–∂–µ–Ω–µ–¥.)"
                    elif reminder.recurrence_type.value == "monthly":
                        recurrence_info = " (–µ–∂–µ–º–µ—Å.)"
                    elif reminder.recurrence_type.value == "yearly":
                        recurrence_info = " (–µ–∂–µ–≥–æ–¥.)"
                
                text += f"{status} {type_icon} <b>{short_title}</b>{recurrence_info}\n"
                
                # –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É, –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö - –∏—Å—Ö–æ–¥–Ω—É—é
                if reminder.recurrence_type.value != "none" and reminder.next_occurrence:
                    display_date = reminder.next_occurrence.strftime("%d.%m")
                    text += f"    üìÖ {display_date} –≤ {time_str}"
                    if reminder.occurrence_count > 0:
                        text += f" (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ {reminder.occurrence_count} —Ä–∞–∑)"
                    text += "\n\n"
                else:
                    text += f"    üìÖ {date_str} –≤ {time_str}\n\n"
                
                builder.button(
                    text=f"{i}. {type_icon} {short_title}", 
                    callback_data=f"view_reminder_{reminder.id}"
                )
            
            builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="create_reminder")
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders_menu")
            builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
            builder.adjust(1)
        
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error listing reminders: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", show_alert=True)


@management_router.callback_query(F.data.startswith("view_reminder_"))
async def view_reminder_details(callback: types.CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = callback.data.replace("view_reminder_", "")
    reminder_manager = await get_reminder_manager(kwargs)
    
    try:
        reminder = await reminder_manager.get_reminder(reminder_id)
        
        if not reminder:
            await callback.answer("‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        remind_datetime = moscow_datetime(reminder.remind_date, reminder.remind_time)
        
        if reminder.reminder_type.value == "simple":
            text = (
                f"üìù <b>–û–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {reminder.title}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {reminder.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {reminder.remind_date.strftime('%d.%m.%Y')}\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {reminder.remind_time.strftime('%H:%M')}\n"
                f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä:</b> {reminder.get_recurrence_description()}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if reminder.is_sent else '‚è∞ –û–∂–∏–¥–∞–µ—Ç'}\n"
                f"üìÜ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {reminder.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if reminder.recurrence_type.value != "none":
                text += f"\nüî¢ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {reminder.occurrence_count} —Ä–∞–∑"
                if reminder.next_occurrence:
                    text += f"\n‚è≠ <b>–°–ª–µ–¥—É—é—â–µ–µ:</b> {reminder.next_occurrence.strftime('%d.%m.%Y')} –≤ {reminder.remind_time.strftime('%H:%M')}"
                if reminder.max_occurrences:
                    text += f"\nüéØ <b>–ú–∞–∫—Å–∏–º—É–º:</b> {reminder.max_occurrences} —Ä–∞–∑"
                if reminder.end_date:
                    text += f"\nüìÖ <b>–î–æ –¥–∞—Ç—ã:</b> {reminder.end_date.strftime('%d.%m.%Y')}"
        else:
            role_names = {
                'assistant': 'üë®‚Äçüíª –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
                'scientist': 'üî¨ –£—á–µ–Ω—ã–π',
                'creative': 'üé® –ö—Ä–µ–∞—Ç–∏–≤',
                'developer': 'üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
            }
            
            text = (
                f"ü§ñ <b>AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {reminder.title}\n"
                f"ü§ñ <b>AI-–∑–∞–ø—Ä–æ—Å:</b> {reminder.ai_prompt}\n"
                f"üë§ <b>–†–æ–ª—å:</b> {role_names.get(reminder.ai_role, reminder.ai_role)}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {reminder.remind_date.strftime('%d.%m.%Y')}\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {reminder.remind_time.strftime('%H:%M')}\n"
                f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä:</b> {reminder.get_recurrence_description()}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if reminder.is_sent else '‚è∞ –û–∂–∏–¥–∞–µ—Ç'}\n"
                f"üìÜ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {reminder.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if reminder.recurrence_type.value != "none":
                text += f"\nüî¢ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {reminder.occurrence_count} —Ä–∞–∑"
                if reminder.next_occurrence:
                    text += f"\n‚è≠ <b>–°–ª–µ–¥—É—é—â–µ–µ:</b> {reminder.next_occurrence.strftime('%d.%m.%Y')} –≤ {reminder.remind_time.strftime('%H:%M')}"
                if reminder.max_occurrences:
                    text += f"\nüéØ <b>–ú–∞–∫—Å–∏–º—É–º:</b> {reminder.max_occurrences} —Ä–∞–∑"
                if reminder.end_date:
                    text += f"\nüìÖ <b>–î–æ –¥–∞—Ç—ã:</b> {reminder.end_date.strftime('%d.%m.%Y')}"
        
        builder = InlineKeyboardBuilder()
        
        # –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö - —Ç–æ–ª—å–∫–æ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        can_edit = (reminder.recurrence_type.value == "none" and not reminder.is_sent) or \
                  (reminder.recurrence_type.value != "none" and reminder.is_active)
        
        if can_edit:
            builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_reminder_{reminder.id}")
            builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_reminder_{reminder.id}")
        
        builder.button(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="list_reminders")
        builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
        builder.adjust(2, 1)
        
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Error viewing reminder {reminder_id}: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)


@management_router.callback_query(F.data.startswith("edit_reminder_"))
async def start_edit_reminder(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = callback.data.replace("edit_reminder_", "")
    reminder_manager = await get_reminder_manager(kwargs)
    
    try:
        reminder = await reminder_manager.get_reminder(reminder_id)
        
        if not reminder:
            await callback.answer("‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        if reminder.is_sent:
            await callback.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(editing_reminder_id=reminder_id)
        await state.set_state(EditReminderStates.choosing_field)
        
        text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            f"üìå <b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {reminder.title}\n"
        )
        
        if reminder.reminder_type.value == "simple":
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {reminder.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        else:
            text += f"AI-–∑–∞–ø—Ä–æ—Å: {reminder.ai_prompt}\n"
            text += f"–†–æ–ª—å: {reminder.ai_role}\n"
            
        text += f"–î–∞—Ç–∞: {reminder.remind_date.strftime('%d.%m.%Y')}\n"
        text += f"–í—Ä–µ–º—è: {reminder.remind_time.strftime('%H:%M')}\n\n"
        text += "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_title")
        
        if reminder.reminder_type.value == "simple":
            builder.button(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
        else:
            builder.button(text="ü§ñ AI-–∑–∞–ø—Ä–æ—Å", callback_data="edit_field_ai_prompt")
            builder.button(text="üë§ –†–æ–ª—å", callback_data="edit_field_ai_role")
            
        builder.button(text="üìÖ –î–∞—Ç–∞", callback_data="edit_field_date")
        builder.button(text="üïê –í—Ä–µ–º—è", callback_data="edit_field_time")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_reminder_{reminder_id}")
        builder.adjust(2, 2, 1, 1)
        
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error starting edit reminder {reminder_id}: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)


@management_router.callback_query(F.data.startswith("delete_reminder_"))
async def confirm_delete_reminder(callback: types.CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = callback.data.replace("delete_reminder_", "")
    reminder_manager = await get_reminder_manager(kwargs)
    
    try:
        reminder = await reminder_manager.get_reminder(reminder_id)
        
        if not reminder:
            await callback.answer("‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        text = (
            f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {reminder.title}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {reminder.remind_date.strftime('%d.%m.%Y')}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {reminder.remind_time.strftime('%H:%M')}\n\n"
            "‚ùó <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?</b>\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{reminder_id}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_reminder_{reminder_id}")
        builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
        builder.adjust(1)
        
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming delete reminder {reminder_id}: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)


@management_router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_reminder(callback: types.CallbackQuery, **kwargs):
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    reminder_id = callback.data.replace("confirm_delete_", "")
    reminder_manager = await get_reminder_manager(kwargs)
    
    try:
        success = await reminder_manager.delete_reminder(reminder_id, callback.from_user.id)
        
        if success:
            text = "‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")
            builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="create_reminder")
            builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
            builder.adjust(1)
            
            await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        else:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error deleting reminder {reminder_id}: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)
