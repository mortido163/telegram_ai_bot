"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ø–æ–¥–º–æ–¥—É–ª–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
"""
import logging
from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.states import ReminderStates
from .reminder_utils import WorkflowMiddleware, safe_edit_message
from .reminder_creation import creation_router
from .reminder_management import management_router
from .recurrence_handlers import (
    process_recurrence_type, ask_for_monthly_day, process_monthly_same_day,
    ask_specific_monthly_day, process_monthly_day, ask_for_interval,
    process_interval, ask_for_end_conditions, process_end_never,
    ask_end_date, process_end_date_quick, process_end_date_text,
    ask_max_occurrences, process_max_count_quick, process_max_occurrences_text
)
from .confirmation_handlers import (
    show_confirmation, confirm_reminder_creation, cancel_reminder_creation
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
router.include_router(creation_router)
router.include_router(management_router)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
router.callback_query.register(process_recurrence_type, F.data.startswith("recurrence_"))
router.callback_query.register(process_monthly_same_day, F.data == "monthly_same_day")
router.callback_query.register(ask_specific_monthly_day, F.data == "monthly_specific_day")
router.callback_query.register(process_monthly_day, F.data.startswith("monthly_day_"))
router.callback_query.register(process_interval, F.data.startswith("interval_"))
router.callback_query.register(process_end_never, F.data == "end_never")
router.callback_query.register(ask_end_date, F.data == "end_by_date")
router.callback_query.register(process_end_date_quick, F.data.startswith("end_date_"))
router.message.register(process_end_date_text, StateFilter(ReminderStates.waiting_for_end_date))
router.callback_query.register(ask_max_occurrences, F.data == "end_by_count")
router.callback_query.register(process_max_count_quick, F.data.startswith("max_count_"))
router.message.register(process_max_occurrences_text, StateFilter(ReminderStates.waiting_for_max_occurrences))

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
router.callback_query.register(confirm_reminder_creation, F.data == "confirm_reminder")
router.callback_query.register(cancel_reminder_creation, F.data == "cancel_reminder")


@router.message(Command("reminders"))
async def cmd_reminders(message: types.Message, state: FSMContext, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ /reminders - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await state.clear()
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")
    builder.button(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reminder_settings")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
    builder.adjust(1)
    
    text = (
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "reminders_menu")
async def show_reminders_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await state.clear()
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")
    builder.button(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reminder_settings")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
    builder.adjust(1)
    
    text = (
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "reminder_settings")
async def show_reminder_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        "üîî <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
        "‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+3 (–ú–æ—Å–∫–≤–∞)\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: 100\n\n"
        "üí° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìù –û–±—ã—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ ü§ñ AI-–∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        "‚Ä¢ üìÖ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        "‚Ä¢ üóë –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders_menu")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "close_reminders")
async def close_reminders(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await state.clear()
    await callback.message.delete()
