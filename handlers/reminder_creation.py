"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –≤–µ—Å—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
"""
import logging
from datetime import datetime, date, time, timedelta
from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.states import ReminderStates
from .reminder_utils import (
    moscow_now, moscow_date, moscow_datetime, safe_edit_message, 
    get_reminder_manager, parse_date, parse_time, get_recurrence_description
)

logger = logging.getLogger(__name__)
creation_router = Router()


@creation_router.callback_query(F.data == "create_reminder")
async def start_reminder_creation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.set_state(ReminderStates.waiting_for_type)
    
    text = (
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–®–∞–≥ 1/6: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –û–±—ã—á–Ω–æ–µ", callback_data="reminder_type_simple")
    builder.button(text="ü§ñ AI-–∑–∞–ø—Ä–æ—Å", callback_data="reminder_type_ai")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(2, 1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


@creation_router.callback_query(F.data.in_(["reminder_type_simple", "reminder_type_ai"]))
async def select_reminder_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_type = "simple" if callback.data == "reminder_type_simple" else "ai_query"
    await state.update_data(reminder_type=reminder_type)
    await state.set_state(ReminderStates.waiting_for_title)
    
    if reminder_type == "simple":
        text = (
            "üìù <b>–û–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
            "–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–º—É–Ω–∞–ª–∫—É</i>"
        )
    else:
        text = (
            "ü§ñ <b>AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
            "–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞</i>"
        )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


@creation_router.message(StateFilter(ReminderStates.waiting_for_title))
async def process_reminder_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    title = message.text.strip()
    
    if len(title) > 100:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=title)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    data = await state.get_data()
    reminder_type = data.get('reminder_type', 'simple')
    
    if reminder_type == 'simple':
        await state.set_state(ReminderStates.waiting_for_description)
        text = (
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n\n"
            "üìù <b>–û–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
            "–®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ 10 —á–∏—Å–ª–∞, —Å—É–º–º–∞ –æ–∫–æ–ª–æ 5000 —Ä—É–±–ª–µ–π</i>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
        builder.adjust(1)
    else:
        await state.set_state(ReminderStates.waiting_for_ai_prompt)
        text = (
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n\n"
            "ü§ñ <b>AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
            "–®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ AI-–∑–∞–ø—Ä–æ—Å\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ö–∞–∫–æ–π —Å–µ–π—á–∞—Å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –∫ –¥–æ–ª–ª–∞—Ä—É?</i>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    
    await message.answer(text, reply_markup=builder.as_markup())


@creation_router.message(StateFilter(ReminderStates.waiting_for_ai_prompt))
async def process_ai_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç AI-–ø—Ä–æ–º–ø—Ç"""
    ai_prompt = message.text.strip()
    
    if len(ai_prompt) > 1000:
        await message.answer("‚ö†Ô∏è AI-–∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(ai_prompt=ai_prompt)
    await state.set_state(ReminderStates.waiting_for_ai_role)
    
    data = await state.get_data()
    title = data.get('title', '')
    
    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
        f"‚úÖ AI-–∑–∞–ø—Ä–æ—Å: <i>{ai_prompt}</i>\n\n"
        "ü§ñ <b>AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
        "–®–∞–≥ 4/6: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è AI"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üë®‚Äçüíª –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="ai_role_assistant")
    builder.button(text="üî¨ –£—á–µ–Ω—ã–π", callback_data="ai_role_scientist")
    builder.button(text="üé® –ö—Ä–µ–∞—Ç–∏–≤", callback_data="ai_role_creative")
    builder.button(text="üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", callback_data="ai_role_developer")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(2, 2, 1)
    
    await message.answer(text, reply_markup=builder.as_markup())


@creation_router.callback_query(F.data.startswith("ai_role_"))
async def select_ai_role(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è AI"""
    role = callback.data.replace("ai_role_", "")
    await state.update_data(ai_role=role)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    await ask_for_date_ai(callback, state)


async def ask_for_date_ai(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.set_state(ReminderStates.waiting_for_date)
    
    data = await state.get_data()
    title = data.get('title', '')
    ai_prompt = data.get('ai_prompt', '')
    ai_role = data.get('ai_role', 'assistant')
    
    role_names = {
        'assistant': 'üë®‚Äçüíª –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
        'scientist': 'üî¨ –£—á–µ–Ω—ã–π',
        'creative': 'üé® –ö—Ä–µ–∞—Ç–∏–≤',
        'developer': 'üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
    }
    
    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
        f"‚úÖ AI-–∑–∞–ø—Ä–æ—Å: <i>{ai_prompt}</i>\n"
        f"‚úÖ –†–æ–ª—å: {role_names.get(ai_role, ai_role)}\n\n"
        "ü§ñ <b>AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
        "–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–§–æ—Ä–º–∞—Ç: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> –∏–ª–∏ <b>–î–î.–ú–ú</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>15.03.2024</i> –∏–ª–∏ <i>15.03</i> (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


@creation_router.callback_query(F.data == "skip_description")
async def skip_description(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
    await state.update_data(description="")
    await ask_for_date(callback, state)


@creation_router.message(StateFilter(ReminderStates.waiting_for_description))
async def process_reminder_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    description = message.text.strip()
    
    if len(description) > 500:
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=description)
    
    # –°–æ–∑–¥–∞–µ–º callback –∫–∞–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ ask_for_date
    class FakeCallback:
        def __init__(self, message):
            self.message = message
        async def answer(self):
            pass
    
    fake_callback = FakeCallback(message)
    await ask_for_date(fake_callback, state, is_new_message=True)


async def ask_for_date(callback, state: FSMContext, is_new_message: bool = False):
    """–ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É"""
    await state.set_state(ReminderStates.waiting_for_date)
    
    data = await state.get_data()
    
    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data['title']}</b>\n"
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</i>\n\n"
        "üìÖ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–§–æ—Ä–º–∞—Ç: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> –∏–ª–∏ <b>–î–î.–ú–ú</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>01.09.2025</i> –∏–ª–∏ <i>01.09</i>"
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∞—Ç
    builder = InlineKeyboardBuilder()
    today = moscow_date()
    
    # –ó–∞–≤—Ç—Ä–∞
    tomorrow = today + timedelta(days=1)
    builder.button(text=f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})", 
                  callback_data=f"quick_date_{tomorrow.isoformat()}")
    
    # –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    week_later = today + timedelta(days=7)
    builder.button(text=f"–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é ({week_later.strftime('%d.%m')})", 
                  callback_data=f"quick_date_{week_later.isoformat()}")
    
    # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if today.month == 12:
        next_month_first = today.replace(year=today.year + 1, month=1, day=1)
    else:
        next_month_first = today.replace(month=today.month + 1, day=1)
    
    builder.button(text=f"1 —á–∏—Å–ª–æ ({next_month_first.strftime('%d.%m')})", 
                  callback_data=f"quick_date_{next_month_first.isoformat()}")
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(1)
    
    if is_new_message:
        await callback.message.answer(text, reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await callback.answer()


@creation_router.callback_query(F.data.startswith("quick_date_"))
async def process_quick_date(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    date_str = callback.data.split("_", 2)[2]
    remind_date = date.fromisoformat(date_str)
    
    await state.update_data(remind_date=remind_date)
    await ask_for_time(callback, state)


@creation_router.message(StateFilter(ReminderStates.waiting_for_date))
async def process_reminder_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    date_text = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        remind_date = parse_date(date_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if remind_date < moscow_date():
            await message.answer("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
            return
        
        await state.update_data(remind_date=remind_date)
        
        # –°–æ–∑–¥–∞–µ–º fake callback –¥–ª—è ask_for_time
        class FakeCallback:
            def __init__(self, message):
                self.message = message
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(message)
        await ask_for_time(fake_callback, state, is_new_message=True)
        
    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. {str(e)}")


async def ask_for_time(callback, state: FSMContext, is_new_message: bool = False):
    """–ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è"""
    await state.set_state(ReminderStates.waiting_for_time)
    
    data = await state.get_data()
    remind_date = data['remind_date']
    
    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data['title']}</b>\n"
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</i>\n"
        f"‚úÖ –î–∞—Ç–∞: <b>{remind_date.strftime('%d.%m.%Y')}</b>\n\n"
        "üïê <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–§–æ—Ä–º–∞—Ç: <b>–ß–ß:–ú–ú</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>09:00</i> –∏–ª–∏ <i>18:30</i>"
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    builder = InlineKeyboardBuilder()
    common_times = ["09:00", "12:00", "15:00", "18:00", "20:00"]
    
    for time_str in common_times:
        builder.button(text=time_str, callback_data=f"quick_time_{time_str}")
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(3, 2, 1)
    
    if is_new_message:
        await callback.message.answer(text, reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await callback.answer()


@creation_router.callback_query(F.data.startswith("quick_time_"))
async def process_quick_time(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    time_str = callback.data.split("_", 2)[2]
    remind_time = time.fromisoformat(time_str)
    
    await state.update_data(remind_time=remind_time)
    await ask_for_recurrence(callback, state)


@creation_router.message(StateFilter(ReminderStates.waiting_for_time))
async def process_reminder_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    time_text = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        remind_time = parse_time(time_text)
        await state.update_data(remind_time=remind_time)
        
        # –°–æ–∑–¥–∞–µ–º fake callback –¥–ª—è show_confirmation
        class FakeCallback:
            def __init__(self, message):
                self.message = message
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(message)
        await ask_for_recurrence(fake_callback, state, is_new_message=True)
        
    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. {str(e)}")


async def ask_for_recurrence(callback, state: FSMContext, is_new_message: bool = False):
    """–ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
    await state.set_state(ReminderStates.waiting_for_recurrence)
    
    data = await state.get_data()
    
    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data['title']}</b>\n"
        f"‚úÖ –î–∞—Ç–∞: <b>{data['remind_date'].strftime('%d.%m.%Y')}</b>\n"
        f"‚úÖ –í—Ä–µ–º—è: <b>{data['remind_time'].strftime('%H:%M')}</b>\n\n"
        "üîÑ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–®–∞–≥ 6/6: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üö´ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ", callback_data="recurrence_none")
    builder.button(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="recurrence_daily")
    builder.button(text="üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="recurrence_weekly")
    builder.button(text="üóì –ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="recurrence_monthly")
    builder.button(text="üéÇ –ï–∂–µ–≥–æ–¥–Ω–æ", callback_data="recurrence_yearly")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(1)
    
    if is_new_message:
        await callback.message.answer(text, reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await callback.answer()


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–æ—É—Ç–µ—Ä–µ
