"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
import logging
from datetime import date, timedelta
from aiogram import F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.states import ReminderStates
from .reminder_utils import moscow_date, safe_edit_message, parse_date

logger = logging.getLogger(__name__)


async def process_recurrence_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
    recurrence = callback.data.replace("recurrence_", "")
    await state.update_data(recurrence_type=recurrence)
    
    if recurrence == "none":
        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        from .confirmation_handlers import show_confirmation
        await show_confirmation(callback, state)
    elif recurrence == "monthly":
        # –î–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
        await ask_for_monthly_day(callback, state)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        await ask_for_interval(callback, state, recurrence)


async def ask_for_monthly_day(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await state.set_state(ReminderStates.waiting_for_monthly_day)
    
    data = await state.get_data()
    remind_date = data['remind_date']
    
    text = (
        f"‚úÖ –ü–æ–≤—Ç–æ—Ä: <b>–ï–∂–µ–º–µ—Å—è—á–Ω–æ</b>\n\n"
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞:</b>\n\n"
        "‚Ä¢ <b>–¢–æ—Ç –∂–µ –¥–µ–Ω—å</b> - –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏\n"
        "‚Ä¢ <b>–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å</b> - –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ–≥–¥–∞ 5-–≥–æ —á–∏—Å–ª–∞"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üìÖ –¢–æ—Ç –∂–µ –¥–µ–Ω—å ({remind_date.day}-–≥–æ)", callback_data="monthly_same_day")
    builder.button(text="üóì –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å", callback_data="monthly_specific_day")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


async def process_monthly_same_day(callback: types.CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞"""
    await state.update_data(monthly_day=None, recurrence_interval=1)
    await ask_for_end_conditions(callback, state)


async def ask_specific_monthly_day(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞"""
    text = (
        "üóì <b>–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (1-31):</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ <b>5</b> - –∫–∞–∂–¥–æ–µ 5-–µ —á–∏—Å–ª–æ\n"
        "‚Ä¢ <b>15</b> - –∫–∞–∂–¥–æ–µ 15-–µ —á–∏—Å–ª–æ\n"
        "‚Ä¢ <b>1</b> - –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞"
    )
    
    builder = InlineKeyboardBuilder()
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–Ω–∏
    for day in [1, 5, 10, 15, 20, 25]:
        builder.button(text=f"{day}-–≥–æ", callback_data=f"monthly_day_{day}")
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(3, 3, 1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


async def process_monthly_day(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –º–µ—Å—è—Ü–∞"""
    day = int(callback.data.replace("monthly_day_", ""))
    await state.update_data(monthly_day=day, recurrence_interval=1)
    await ask_for_end_conditions(callback, state)


async def ask_for_interval(callback: types.CallbackQuery, state: FSMContext, recurrence_type: str):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    await state.set_state(ReminderStates.waiting_for_recurrence_interval)
    
    type_names = {
        'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
        'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', 
        'yearly': '–ï–∂–µ–≥–æ–¥–Ω–æ'
    }
    
    type_units = {
        'daily': '–¥–Ω–µ–π',
        'weekly': '–Ω–µ–¥–µ–ª—å',
        'yearly': '–ª–µ—Ç'
    }
    
    text = (
        f"‚úÖ –ü–æ–≤—Ç–æ—Ä: <b>{type_names[recurrence_type]}</b>\n\n"
        f"üìä <b>–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</b>\n\n"
        f"–ö–∞–∂–¥—ã–µ —Å–∫–æ–ª—å–∫–æ {type_units[recurrence_type]}?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="1", callback_data=f"interval_{recurrence_type}_1")
    
    if recurrence_type == 'daily':
        builder.button(text="2", callback_data=f"interval_{recurrence_type}_2")
        builder.button(text="3", callback_data=f"interval_{recurrence_type}_3")
        builder.button(text="7", callback_data=f"interval_{recurrence_type}_7")
    elif recurrence_type == 'weekly':
        builder.button(text="2", callback_data=f"interval_{recurrence_type}_2")
        builder.button(text="4", callback_data=f"interval_{recurrence_type}_4")
    elif recurrence_type == 'yearly':
        builder.button(text="2", callback_data=f"interval_{recurrence_type}_2")
        builder.button(text="5", callback_data=f"interval_{recurrence_type}_5")
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(2, 2, 1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


async def process_interval(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    parts = callback.data.split("_")
    recurrence_type = parts[1]
    interval = int(parts[2])
    
    await state.update_data(recurrence_interval=interval)
    await ask_for_end_conditions(callback, state)


async def ask_for_end_conditions(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    await state.set_state(ReminderStates.waiting_for_end_date)
    
    data = await state.get_data()
    recurrence_type = data.get('recurrence_type', 'none')
    
    if recurrence_type == 'none':
        from .confirmation_handlers import show_confirmation
        await show_confirmation(callback, state)
        return
    
    text = (
        "‚è∞ <b>–£—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ôæ –ù–∏–∫–æ–≥–¥–∞", callback_data="end_never")
    builder.button(text="üìÖ –î–æ –¥–∞—Ç—ã", callback_data="end_by_date")
    builder.button(text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑", callback_data="end_by_count")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


async def process_end_never(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å"""
    await state.update_data(end_date=None, max_occurrences=None)
    from .confirmation_handlers import show_confirmation
    await show_confirmation(callback, state)


async def ask_end_date(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    text = (
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> –∏–ª–∏ <b>–î–î.–ú–ú</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>31.12.2025</i>"
    )
    
    builder = InlineKeyboardBuilder()
    today = moscow_date()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    in_month = today + timedelta(days=30)
    in_year = today + timedelta(days=365)
    
    builder.button(text=f"–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü ({in_month.strftime('%d.%m')})", 
                  callback_data=f"end_date_{in_month.isoformat()}")
    builder.button(text=f"–ß–µ—Ä–µ–∑ –≥–æ–¥ ({in_year.strftime('%d.%m.%Y')})", 
                  callback_data=f"end_date_{in_year.isoformat()}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


async def process_end_date_quick(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    date_str = callback.data.replace("end_date_", "")
    end_date = date.fromisoformat(date_str)
    
    await state.update_data(end_date=end_date, max_occurrences=None)
    from .confirmation_handlers import show_confirmation
    await show_confirmation(callback, state)


async def process_end_date_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        end_date = parse_date(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if end_date <= moscow_date():
            await message.answer("‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
        
        await state.update_data(end_date=end_date, max_occurrences=None)
        
        class FakeCallback:
            def __init__(self, message):
                self.message = message
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(message)
        from .confirmation_handlers import show_confirmation
        await show_confirmation(fake_callback, state, is_new_message=True)
        
    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. {str(e)}")


async def ask_max_occurrences(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    await state.set_state(ReminderStates.waiting_for_max_occurrences)
    
    text = (
        "üî¢ <b>–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365:"
    )
    
    builder = InlineKeyboardBuilder()
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for count in [5, 10, 20, 30, 50, 100]:
        builder.button(text=f"{count} —Ä–∞–∑", callback_data=f"max_count_{count}")
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(3, 3, 1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()


async def process_max_count_quick(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    count = int(callback.data.replace("max_count_", ""))
    await state.update_data(max_occurrences=count, end_date=None)
    from .confirmation_handlers import show_confirmation
    await show_confirmation(callback, state)


async def process_max_occurrences_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    try:
        count = int(message.text.strip())
        
        if count < 1 or count > 365:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365.")
            return
        
        await state.update_data(max_occurrences=count, end_date=None)
        
        class FakeCallback:
            def __init__(self, message):
                self.message = message
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(message)
        from .confirmation_handlers import show_confirmation
        await show_confirmation(fake_callback, state, is_new_message=True)
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
