"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
import logging
from datetime import date
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.states import ReminderStates
from .reminder_utils import (
    moscow_datetime, safe_edit_message, get_reminder_manager, 
    get_recurrence_description
)

logger = logging.getLogger(__name__)


async def show_confirmation(callback, state: FSMContext, is_new_message: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.set_state(ReminderStates.confirmation)
    
    data = await state.get_data()
    remind_datetime = moscow_datetime(data['remind_date'], data['remind_time'])
    reminder_type = data.get('reminder_type', 'simple')
    recurrence_type = data.get('recurrence_type', 'none')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
    recurrence_desc = get_recurrence_description(data)
    
    if reminder_type == 'simple':
        text = (
            "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {data['remind_date'].strftime('%d.%m.%Y')}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {data['remind_time'].strftime('%H:%M')}\n"
            f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä:</b> {recurrence_desc}\n\n"
        )
        
        if recurrence_type == 'none':
            text += f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b>\n{remind_datetime.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        else:
            text += f"‚è∞ <b>–ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n{remind_datetime.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            
        text += "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?"
        
    else:
        role_names = {
            'assistant': 'üë®‚Äçüíª –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
            'scientist': 'üî¨ –£—á–µ–Ω—ã–π',
            'creative': 'üé® –ö—Ä–µ–∞—Ç–∏–≤',
            'developer': 'üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
        }
        ai_role = data.get('ai_role', 'assistant')
        
        text = (
            "ü§ñ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
            f"ü§ñ <b>AI-–∑–∞–ø—Ä–æ—Å:</b> {data.get('ai_prompt', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ <b>–†–æ–ª—å:</b> {role_names.get(ai_role, ai_role)}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {data['remind_date'].strftime('%d.%m.%Y')}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {data['remind_time'].strftime('%H:%M')}\n"
            f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä:</b> {recurrence_desc}\n\n"
        )
        
        if recurrence_type == 'none':
            text += f"‚è∞ <b>AI-–∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:</b>\n{remind_datetime.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        else:
            text += f"‚è∞ <b>–ü–µ—Ä–≤—ã–π AI-–∑–∞–ø—Ä–æ—Å:</b>\n{remind_datetime.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            
        text += "–°–æ–∑–¥–∞—Ç—å AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_reminder")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_reminder_data")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reminder")
    builder.adjust(1)
    
    if is_new_message:
        await callback.message.answer(text, reply_markup=builder.as_markup())
    else:
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await callback.answer()


async def confirm_reminder_creation(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    data = await state.get_data()
    reminder_manager = await get_reminder_manager(kwargs)
    reminder_type = data.get('reminder_type', 'simple')
    
    try:
        from bot.reminders import ReminderType, RecurrenceType
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        recurrence_type = RecurrenceType(data.get('recurrence_type', 'none'))
        recurrence_interval = data.get('recurrence_interval', 1)
        monthly_day = data.get('monthly_day')
        end_date = data.get('end_date')
        max_occurrences = data.get('max_occurrences')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º end_date –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(end_date, str):
            end_date = date.fromisoformat(end_date)
        
        if reminder_type == 'simple':
            reminder_id = await reminder_manager.create_reminder(
                user_id=callback.from_user.id,
                title=data['title'],
                description=data.get('description', ''),
                remind_date=data['remind_date'],
                remind_time=data['remind_time'],
                reminder_type=ReminderType.SIMPLE,
                recurrence_type=recurrence_type,
                recurrence_interval=recurrence_interval,
                monthly_day=monthly_day,
                end_date=end_date,
                max_occurrences=max_occurrences
            )
            
            recurrence_desc = get_recurrence_description(data)
            
            text = (
                "üéâ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üìå {data['title']}\n"
                f"‚è∞ {data['remind_date'].strftime('%d.%m.%Y')} –≤ {data['remind_time'].strftime('%H:%M')}\n"
                f"üîÑ {recurrence_desc}\n\n"
            )
            
            if recurrence_type == RecurrenceType.NONE:
                text += "–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
            else:
                text += "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏!"
                
        else:
            reminder_id = await reminder_manager.create_reminder(
                user_id=callback.from_user.id,
                title=data['title'],
                description='',  # –î–ª—è AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                remind_date=data['remind_date'],
                remind_time=data['remind_time'],
                reminder_type=ReminderType.AI_QUERY,
                ai_prompt=data.get('ai_prompt', ''),
                ai_role=data.get('ai_role', 'assistant'),
                recurrence_type=recurrence_type,
                recurrence_interval=recurrence_interval,
                monthly_day=monthly_day,
                end_date=end_date,
                max_occurrences=max_occurrences
            )
            
            recurrence_desc = get_recurrence_description(data)
            
            text = (
                "ü§ñ <b>AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üìå {data['title']}\n"
                f"ü§ñ AI-–∑–∞–ø—Ä–æ—Å: {data.get('ai_prompt', '')}\n"
                f"‚è∞ {data['remind_date'].strftime('%d.%m.%Y')} –≤ {data['remind_time'].strftime('%H:%M')}\n"
                f"üîÑ {recurrence_desc}\n\n"
            )
            
            if recurrence_type == RecurrenceType.NONE:
                text += "–Ø –≤—ã–ø–æ–ª–Ω—é AI-–∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
            else:
                text += "–Ø –±—É–¥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å AI-–∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏!"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_reminder")
        builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
        builder.adjust(1)
        
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error creating reminder: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)


async def cancel_reminder_creation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.clear()
    
    text = "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="reminders_menu")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reminders")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    await callback.answer()
