#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å CacheManager, ReminderManager
–¢—Ä–µ–±—É–µ—Ç Redis –∏ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
import pytest
from datetime import date, time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è pytest-asyncio
pytest_plugins = ("pytest_asyncio",)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot.cache import CacheManager
from bot.reminders import ReminderManager, ReminderType
from config import Config

@pytest.mark.asyncio
async def test_full_reminder_workflow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π workflow —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    # –†–ï–ê–õ–¨–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    cache_manager = CacheManager()
    reminder_manager = ReminderManager(cache_manager)
    
    test_user_id = 999888777  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    created_reminders = []
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüßπ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
        try:
            old_reminders = await reminder_manager.get_user_reminders(test_user_id)
            for reminder in old_reminders:
                await reminder_manager.delete_reminder(reminder.id, test_user_id)
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(old_reminders)} —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        except:
            print("‚úÖ –°—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # 1. –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
        simple_id = await reminder_manager.create_reminder(
            user_id=test_user_id,
            title="–¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            remind_date=date(2024, 12, 31),
            remind_time=time(12, 0),
            reminder_type=ReminderType.SIMPLE
        )
        created_reminders.append(simple_id)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {simple_id}")
        
        # 2. –°–æ–∑–¥–∞–µ–º AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
        ai_id = await reminder_manager.create_reminder(
            user_id=test_user_id,
            title="–¢–µ—Å—Ç AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            description="",
            remind_date=date(2024, 12, 31),
            remind_time=time(15, 0),
            reminder_type=ReminderType.AI_QUERY,
            ai_prompt="–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è?",
            ai_role="assistant"
        )
        created_reminders.append(ai_id)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {ai_id}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ ReminderManager
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        reminders = await reminder_manager.get_user_reminders(test_user_id)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:")
        
        simple_found = False
        ai_found = False
        
        for reminder in reminders:
            print(f"   - {reminder.reminder_type.value}: {reminder.title}")
            if reminder.reminder_type == ReminderType.SIMPLE and reminder.id == simple_id:
                simple_found = True
                assert reminder.description == "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
            elif reminder.reminder_type == ReminderType.AI_QUERY and reminder.id == ai_id:
                ai_found = True
                print(f"     AI-–∑–∞–ø—Ä–æ—Å: {reminder.ai_prompt}")
                print(f"     –†–æ–ª—å: {reminder.ai_role}")
                assert reminder.ai_prompt == "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è?"
                assert reminder.ai_role == "assistant"
        
        assert simple_found, "–°–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        assert ai_found, "–°–æ–∑–¥–∞–Ω–Ω–æ–µ AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        # 4. –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        for reminder in reminders:
            if reminder.id in created_reminders:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                data = reminder.to_dict()
                restored = reminder.__class__.from_dict(data)
                
                assert restored.id == reminder.id
                assert restored.reminder_type == reminder.reminder_type
                assert restored.ai_prompt == reminder.ai_prompt
                assert restored.ai_role == reminder.ai_role
                assert restored.user_id == reminder.user_id
                
                print(f"   ‚úÖ {reminder.reminder_type.value}: —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 5. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        print("\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
        ai_reminder = next(r for r in reminders if r.id == ai_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
        ai_reminder.title = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        ai_reminder.ai_prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        update_result = await reminder_manager.update_reminder(ai_reminder)
        assert update_result == True, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_reminder = await reminder_manager.get_reminder(ai_id)
        assert updated_reminder.title == "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ AI-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        assert updated_reminder.ai_prompt == "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        print("\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        final_reminders = await reminder_manager.get_user_reminders(test_user_id)
        our_reminders = [r for r in final_reminders if r.id in created_reminders]
        assert len(our_reminders) == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∞–π–¥–µ–Ω–æ {len(our_reminders)}"
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(our_reminders)} –Ω–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        print("\nüéâ –í—Å–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        try:
            for reminder_id in created_reminders:
                await reminder_manager.delete_reminder(reminder_id, test_user_id)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    return True

@pytest.mark.asyncio
async def test_reminder_scheduler_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    print("\nüïí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º...")
    
    cache_manager = CacheManager()
    reminder_manager = ReminderManager(cache_manager)
    
    test_user_id = 987654321
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        from datetime import datetime, timedelta
        tomorrow = datetime.now() + timedelta(days=1)
        
        reminder_id = await reminder_manager.create_reminder(
            user_id=test_user_id,
            title="–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞",
            description="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞",
            remind_date=tomorrow.date(),
            remind_time=tomorrow.time(),
            reminder_type=ReminderType.SIMPLE
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
        await reminder_manager.start_scheduler()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫  
        user_reminders = await reminder_manager.get_user_reminders(test_user_id)
        our_reminder = next((r for r in user_reminders if r.id == reminder_id), None)
        assert our_reminder is not None, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await reminder_manager.stop_scheduler()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—á–∏—Å—Ç–∫–∞
        await reminder_manager.delete_reminder(reminder_id, test_user_id)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

@pytest.mark.asyncio
async def test_cache_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º...")
    
    cache_manager = CacheManager()
    
    try:
        # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        test_key = "test_reminder_data"
        test_data = {
            "user_id": 123,
            "title": "–¢–µ—Å—Ç –∫–µ—à–∞",
            "type": "ai_query"
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
        await cache_manager.set("test_reminders", test_key, test_data)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        cached_data = await cache_manager.get("test_reminders", test_key)
        assert cached_data == test_data, "–î–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        await cache_manager.clear("test_reminders", test_key)
        deleted_data = await cache_manager.get("test_reminders", test_key)
        assert deleted_data is None, "–î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–µ—à–∞"
        print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–µ—à–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    tests = [
        ("Full Reminder Workflow", test_full_reminder_workflow),
        ("Reminder Scheduler Integration", test_reminder_scheduler_integration),
        ("Cache Integration", test_cache_integration),
    ]
    
    passed = 0
    total = len(tests)
    
    print(f"üß™ –ó–∞–ø—É—Å–∫ {total} –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    print("‚ÑπÔ∏è  –≠—Ç–∏ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç Redis –∏ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã")
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"üìù –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        print('='*50)
        
        try:
            result = await test_func()
            if result:
                passed += 1
                print(f"\n‚úÖ {test_name} –ü–†–û–®–ï–õ")
            else:
                print(f"\n‚ùå {test_name} –ù–ï –ü–†–û–®–ï–õ")
        except Exception as e:
            print(f"\n‚ùå {test_name} –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\n{'='*60}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed}/{total} –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"üí• {total - passed} –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏!")
        return False

if __name__ == "__main__":
    success = asyncio.run(run_integration_tests())
    sys.exit(0 if success else 1)
