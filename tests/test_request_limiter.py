#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
import sys
import os
import pytest
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è pytest-asyncio
pytest_plugins = ("pytest_asyncio",)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot.request_limiter import RequestLimiter

@pytest.mark.asyncio
async def test_request_limiter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    limiter = RequestLimiter(max_request_time=5)
    await limiter.start()
    
    test_user_id = 123456
    
    try:
        # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
        print("\nüìù –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        result1 = await limiter.acquire_request_lock(test_user_id, 'text')
        assert result1 == True, "–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        print("‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç")
        
        # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
        print("\nüìù –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        result2 = await limiter.acquire_request_lock(test_user_id, 'text')
        assert result2 == False, "–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        print("‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
        print("\nüìù –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        other_user_id = 789012
        result3 = await limiter.acquire_request_lock(other_user_id, 'text')
        assert result3 == True, "–ó–∞–ø—Ä–æ—Å –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—è—Ç")
        
        # –¢–µ—Å—Ç 4: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        print("\nüìù –¢–µ—Å—Ç 4: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        await limiter.release_request_lock(test_user_id)
        result4 = await limiter.acquire_request_lock(test_user_id, 'image')
        assert result4 == True, "–ü–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
        print("\nüìù –¢–µ—Å—Ç 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö")
        active_count = limiter.get_active_requests_count()
        assert active_count == 2, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ª—É—á–µ–Ω–æ {active_count}"
        
        is_user_active = limiter.is_user_active(test_user_id)
        assert is_user_active == True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"
        
        user_info = limiter.get_user_request_info(test_user_id)
        assert user_info is not None, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
        assert user_info.request_type == 'image', "–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'image'"
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 6: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞
        print("\nüìù –¢–µ—Å—Ç 6: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∂–¥–µ–º 6 —Å–µ–∫—É–Ω–¥...)")
        await asyncio.sleep(6)  # –ñ–¥–µ–º –±–æ–ª—å—à–µ max_request_time
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        result5 = await limiter.acquire_request_lock(test_user_id, 'text')
        assert result5 == True, "–ü–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞...")
        await limiter.stop()
        print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return True

@pytest.mark.asyncio
async def test_ai_client_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AI –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–µ–º"""
    
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI –∫–ª–∏–µ–Ω—Ç–æ–º...")
    
    from bot.ai_client import AIClient
    
    limiter = RequestLimiter()
    await limiter.start()
    
    ai_client = AIClient()
    ai_client.set_request_limiter(limiter)
    
    test_user_id = 555666
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ API –∫–ª—é—á–µ–π)
        print("\nüìù –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        response1 = await ai_client.get_response("–¢–µ—Å—Ç", test_user_id)
        # –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π, –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        assert not response1.startswith("‚è≥"), "–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        print("‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è)
        print("\nüìù –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å")
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        await limiter.acquire_request_lock(test_user_id, 'text')
        response2 = await ai_client.get_response("–¢–µ—Å—Ç2", test_user_id)
        assert response2.startswith("‚è≥"), "–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        print("‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –∫–ª–∏–µ–Ω—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    finally:
        await limiter.stop()
    
    return True

if __name__ == "__main__":
    async def run_all_tests():
        success1 = await test_request_limiter()
        success2 = await test_ai_client_integration()
        return success1 and success2
    
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)
