#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CI/CD pipeline
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Redis, AI API)
–§–æ–∫—É—Å –Ω–∞ –∏–º–ø–æ—Ä—Ç–∞—Ö, —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
"""

import asyncio
import sys
import os
import logging
import pytest

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è pytest-asyncio
pytest_plugins = ("pytest_asyncio",)
from datetime import date, time, datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CI
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

@pytest.mark.asyncio
async def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ - –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è CI"""
    try:
        from bot.reminders import ReminderManager, ReminderType, Reminder
        from bot.request_limiter import RequestLimiter, UserRequestInfo
        from bot.ai_client import AIClient
        from bot.cache import CacheManager
        logger.info("‚úÖ All basic imports successful")
        return True
    except ImportError as e:
        logger.error(f"‚ùå Import failed: {e}")
        return False

@pytest.mark.asyncio
async def test_reminder_types():
    """–¢–µ—Å—Ç enum —Ç–∏–ø–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"""
    try:
        from bot.reminders import ReminderType
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        simple_type = ReminderType.SIMPLE
        ai_type = ReminderType.AI_QUERY
        
        assert simple_type.value == "simple"
        assert ai_type.value == "ai_query"
        
        logger.info("‚úÖ Reminder types work correctly")
        return True
    except Exception as e:
        logger.error(f"‚ùå Reminder types test failed: {e}")
        return False

@pytest.mark.asyncio
async def test_reminder_model_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
    try:
        from bot.reminders import Reminder, ReminderType
        from uuid import uuid4
        
        # –¢–û–õ–¨–ö–û —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏, –ë–ï–ó CacheManager
        simple_reminder = Reminder(
            id=str(uuid4()),
            user_id=123,
            title="Test Simple",
            description="Test description",
            remind_date=date(2024, 12, 31),
            remind_time=time(12, 0),
            created_at=datetime.now(),
            reminder_type=ReminderType.SIMPLE
        )
        
        ai_reminder = Reminder(
            id=str(uuid4()),
            user_id=123,
            title="Test AI",
            description="",
            remind_date=date(2024, 12, 31),
            remind_time=time(15, 0),
            created_at=datetime.now(),
            reminder_type=ReminderType.AI_QUERY,
            ai_prompt="Test AI prompt",
            ai_role="assistant"
        )
        
        # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –¢–û–õ–¨–ö–û –≤ –ø–∞–º—è—Ç–∏
        simple_dict = simple_reminder.to_dict()
        ai_dict = ai_reminder.to_dict()
        
        # –¢–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        restored_simple = Reminder.from_dict(simple_dict)
        restored_ai = Reminder.from_dict(ai_dict)
        
        assert restored_simple.reminder_type == ReminderType.SIMPLE
        assert restored_ai.reminder_type == ReminderType.AI_QUERY
        assert restored_ai.ai_prompt == "Test AI prompt"
        
        logger.info("‚úÖ Reminder model creation and serialization work correctly")
        return True
    except Exception as e:
        logger.error(f"‚ùå Reminder model test failed: {e}")
        return False

@pytest.mark.asyncio
async def test_request_limiter_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è - –ë–ï–ó —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    try:
        from bot.request_limiter import RequestLimiter
        
        # –°–æ–∑–¥–∞–µ–º –ë–ï–ó –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        limiter = RequestLimiter(max_request_time=60)
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º await limiter.start() - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞
        
        test_user = 999
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        result1 = await limiter.acquire_request_lock(test_user, 'text')
        assert result1 == True, "First request should succeed"
        
        result2 = await limiter.acquire_request_lock(test_user, 'text')
        assert result2 == False, "Second request should be blocked"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        assert limiter.is_user_active(test_user) == True
        assert limiter.get_active_requests_count() == 1
        
        # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
        await limiter.release_request_lock(test_user)
        assert limiter.is_user_active(test_user) == False
        
        logger.info("‚úÖ Request limiter logic works correctly")
        return True
    except Exception as e:
        logger.error(f"‚ùå Request limiter logic test failed: {e}")
        return False

@pytest.mark.asyncio
async def test_ai_client_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI –∫–ª–∏–µ–Ω—Ç–∞ - –ë–ï–ó —Ä–µ–∞–ª—å–Ω—ã—Ö AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        from bot.ai_client import AIClient
        from bot.request_limiter import RequestLimiter
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
        limiter = RequestLimiter()
        ai_client = AIClient()
        
        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è
        ai_client.set_request_limiter(limiter)
        assert ai_client.request_limiter is not None
        
        # –¢–µ—Å—Ç —Å–º–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        original_provider = ai_client.active_provider
        await ai_client.set_provider("openai")  # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        assert ai_client.active_provider == "openai"
        
        logger.info("‚úÖ AI client configuration works correctly")
        return True
    except Exception as e:
        logger.error(f"‚ùå AI client configuration test failed: {e}")
        return False

@pytest.mark.asyncio
async def test_fsm_states():
    """–¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM"""
    try:
        from bot.states import ReminderStates, EditReminderStates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        required_states = [
            'waiting_for_type',
            'waiting_for_title', 
            'waiting_for_description',
            'waiting_for_date',
            'waiting_for_time',
            'waiting_for_ai_prompt',
            'waiting_for_ai_role',
            'confirmation'
        ]
        
        for state_name in required_states:
            state = getattr(ReminderStates, state_name, None)
            assert state is not None, f"State {state_name} should be defined"
        
        logger.info("‚úÖ FSM states are correctly defined")
        return True
    except Exception as e:
        logger.error(f"‚ùå FSM states test failed: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±—ã—Å—Ç—Ä—ã—Ö –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è CI"""
    tests = [
        ("Basic Imports", test_basic_imports),
        ("Reminder Types", test_reminder_types),
        ("Reminder Model Creation", test_reminder_model_creation),
        ("Request Limiter Logic", test_request_limiter_logic),
        ("AI Client Configuration", test_ai_client_configuration),
        ("FSM States", test_fsm_states),
    ]
    
    passed = 0
    total = len(tests)
    
    logger.info(f"üß™ Running {total} unit tests for CI...")
    logger.info("‚ÑπÔ∏è  These tests run WITHOUT external dependencies (Redis, AI APIs)")
    
    for test_name, test_func in tests:
        logger.info(f"\nüìù Running test: {test_name}")
        try:
            result = await test_func()
            if result:
                passed += 1
                logger.info(f"‚úÖ {test_name} PASSED")
            else:
                logger.error(f"‚ùå {test_name} FAILED")
        except Exception as e:
            logger.error(f"‚ùå {test_name} FAILED with exception: {e}")
    
    logger.info(f"\nüìä Unit Test Results: {passed}/{total} passed")
    
    if passed == total:
        logger.info("üéâ All unit tests passed!")
        return True
    else:
        logger.error(f"üí• {total - passed} unit tests failed!")
        return False

if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)
